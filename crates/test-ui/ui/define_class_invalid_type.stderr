error[E0277]: the trait bound `Retained<CustomObject>: EncodeReturn` is not satisfied
 --> ui/define_class_invalid_type.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct CustomObject;
... |
  | | );
  | |_^ the trait `Encode` is not implemented for `Retained<CustomObject>`
  |
  = help: the following other types implement trait `Encode`:
            &'a T
            &'a mut T
            *const T
            *mut T
            AtomicI16
            AtomicI32
            AtomicI64
            AtomicI8
          and $N others
  = note: required for `Retained<CustomObject>` to implement `EncodeReturn`
  = note: required for `Retained<CustomObject>` to implement `ConvertReturn<()>`
  = note: this error originates in the macro `$crate::__define_class_method_out_inner` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Vec<()>: EncodeReturn` is not satisfied
 --> ui/define_class_invalid_type.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct CustomObject;
... |
  | | );
  | |_^ the trait `Encode` is not implemented for `Vec<()>`
  |
  = help: the following other types implement trait `Encode`:
            &'a T
            &'a mut T
            *const T
            *mut T
            AtomicI16
            AtomicI32
            AtomicI64
            AtomicI8
          and $N others
  = note: required for `Vec<()>` to implement `EncodeReturn`
  = note: required for `Vec<()>` to implement `__macros::convert::return_private::Sealed`
note: required by a bound in `ConvertReturn`
 --> $WORKSPACE/crates/objc2/src/__macros/convert.rs
  |
  | pub trait ConvertReturn<MethodFamily>: return_private::Sealed {
  |                                        ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ConvertReturn`
  = note: `ConvertReturn` is a "sealed trait", because to implement it you also need to implement `objc2::__macros::convert::return_private::Sealed`, which is not accessible; this is usually done to force you to use one of the provided types that already implement it
  = help: the following types implement the trait:
            bool
            objc2::rc::Retained<T>
            std::option::Option<objc2::rc::Retained<T>>
            objc2::rc::Allocated<T>
            T
  = note: this error originates in the macro `$crate::__define_class_method_out_inner` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Box<u32>: EncodeArgument` is not satisfied
 --> ui/define_class_invalid_type.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct CustomObject;
... |
  | | );
  | |_^ the trait `Encode` is not implemented for `Box<u32>`
  |
  = help: the following other types implement trait `Encode`:
            &'a T
            &'a mut T
            *const T
            *mut T
            AtomicI16
            AtomicI32
            AtomicI64
            AtomicI8
          and $N others
  = note: required for `Box<u32>` to implement `EncodeArgument`
  = note: required for `Box<u32>` to implement `__macros::convert::argument_private::Sealed`
note: required by a bound in `ConvertArgument`
 --> $WORKSPACE/crates/objc2/src/__macros/convert.rs
  |
  | pub trait ConvertArgument: argument_private::Sealed {
  |                            ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ConvertArgument`
  = note: `ConvertArgument` is a "sealed trait", because to implement it you also need to implement `objc2::__macros::convert::argument_private::Sealed`, which is not accessible; this is usually done to force you to use one of the provided types that already implement it
  = help: the following types implement the trait:
            &mut objc2::rc::Retained<T>
            &mut std::option::Option<objc2::rc::Retained<T>>
            std::option::Option<&mut objc2::rc::Retained<T>>
            std::option::Option<&mut std::option::Option<objc2::rc::Retained<T>>>
            bool
            T
  = note: this error originates in the macro `$crate::__define_class_rewrite_params` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CustomObject: EncodeArgument` is not satisfied
 --> ui/define_class_invalid_type.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct CustomObject;
... |
  | | );
  | |_^ unsatisfied trait bound
  |
help: the trait `Encode` is not implemented for `CustomObject`
 --> ui/define_class_invalid_type.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct CustomObject;
... |
  | | );
  | |_^
  = help: the following other types implement trait `Encode`:
            &'a T
            &'a mut T
            *const T
            *mut T
            AtomicI16
            AtomicI32
            AtomicI64
            AtomicI8
          and $N others
  = note: required for `CustomObject` to implement `EncodeArgument`
  = note: required for `CustomObject` to implement `__macros::convert::argument_private::Sealed`
note: required by a bound in `ConvertArgument`
 --> $WORKSPACE/crates/objc2/src/__macros/convert.rs
  |
  | pub trait ConvertArgument: argument_private::Sealed {
  |                            ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ConvertArgument`
  = note: `ConvertArgument` is a "sealed trait", because to implement it you also need to implement `objc2::__macros::convert::argument_private::Sealed`, which is not accessible; this is usually done to force you to use one of the provided types that already implement it
  = help: the following types implement the trait:
            &mut objc2::rc::Retained<T>
            &mut std::option::Option<objc2::rc::Retained<T>>
            std::option::Option<&mut objc2::rc::Retained<T>>
            std::option::Option<&mut std::option::Option<objc2::rc::Retained<T>>>
            bool
            T
  = note: this error originates in the macro `$crate::__define_class_rewrite_params` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Retained<CustomObject>: EncodeReturn` is not satisfied
 --> ui/define_class_invalid_type.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct CustomObject;
... |
  | | );
  | |_^ the trait `Encode` is not implemented for `Retained<CustomObject>`
  |
  = help: the following other types implement trait `Encode`:
            &'a T
            &'a mut T
            *const T
            *mut T
            AtomicI16
            AtomicI32
            AtomicI64
            AtomicI8
          and $N others
  = note: required for `Retained<CustomObject>` to implement `EncodeReturn`
  = note: required for `Retained<CustomObject>` to implement `ConvertReturn<()>`
  = note: this error originates in the macro `$crate::__define_class_register_out` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Retained<CustomObject>: Encode` is not satisfied
 --> ui/define_class_invalid_type.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct CustomObject;
... |
  | | );
  | | ^
  | | |
  | |_the trait `Encode` is not implemented for `Retained<CustomObject>`
  |   required by a bound introduced by this call
  |
  = help: the following other types implement trait `Encode`:
            &'a T
            &'a mut T
            *const T
            *mut T
            AtomicI16
            AtomicI32
            AtomicI64
            AtomicI8
          and $N others
  = note: required for `Retained<CustomObject>` to implement `EncodeReturn`
  = note: required for `extern "C-unwind" fn(&AnyClass, objc2::runtime::Sel) -> Retained<CustomObject>` to implement `MethodImplementation`
note: required by a bound in `ClassBuilderHelper::<T>::add_class_method`
 --> $WORKSPACE/crates/objc2/src/__macros/define_class/checks.rs
  |
  |     pub unsafe fn add_class_method<F>(&mut self, sel: Sel, func: F)
  |                   ---------------- required by a bound in this associated function
  |     where
  |         F: MethodImplementation<Callee = AnyClass>,
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ClassBuilderHelper::<T>::add_class_method`
  = note: this error originates in the macro `$crate::__define_class_register_out` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Vec<()>: EncodeReturn` is not satisfied
 --> ui/define_class_invalid_type.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct CustomObject;
... |
  | | );
  | |_^ the trait `Encode` is not implemented for `Vec<()>`
  |
  = help: the following other types implement trait `Encode`:
            &'a T
            &'a mut T
            *const T
            *mut T
            AtomicI16
            AtomicI32
            AtomicI64
            AtomicI8
          and $N others
  = note: required for `Vec<()>` to implement `EncodeReturn`
  = note: required for `Vec<()>` to implement `ConvertReturn<()>`
  = note: this error originates in the macro `$crate::__define_class_register_out` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Vec<()>: Encode` is not satisfied
 --> ui/define_class_invalid_type.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct CustomObject;
... |
  | | );
  | | ^
  | | |
  | |_the trait `Encode` is not implemented for `Vec<()>`
  |   required by a bound introduced by this call
  |
  = help: the following other types implement trait `Encode`:
            &'a T
            &'a mut T
            *const T
            *mut T
            AtomicI16
            AtomicI32
            AtomicI64
            AtomicI8
          and $N others
  = note: required for `Vec<()>` to implement `EncodeReturn`
  = note: required for `extern "C-unwind" fn(&AnyClass, objc2::runtime::Sel) -> Vec<()>` to implement `MethodImplementation`
note: required by a bound in `ClassBuilderHelper::<T>::add_class_method`
 --> $WORKSPACE/crates/objc2/src/__macros/define_class/checks.rs
  |
  |     pub unsafe fn add_class_method<F>(&mut self, sel: Sel, func: F)
  |                   ---------------- required by a bound in this associated function
  |     where
  |         F: MethodImplementation<Callee = AnyClass>,
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ClassBuilderHelper::<T>::add_class_method`
  = note: this error originates in the macro `$crate::__define_class_register_out` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Box<u32>: EncodeArgument` is not satisfied
 --> ui/define_class_invalid_type.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct CustomObject;
... |
  | | );
  | |_^ the trait `Encode` is not implemented for `Box<u32>`
  |
  = help: the following other types implement trait `Encode`:
            &'a T
            &'a mut T
            *const T
            *mut T
            AtomicI16
            AtomicI32
            AtomicI64
            AtomicI8
          and $N others
  = note: required for `Box<u32>` to implement `EncodeArgument`
  = note: required for `Box<u32>` to implement `ConvertArgument`
  = note: this error originates in the macro `$crate::__define_class_register_out` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Box<u32>: Encode` is not satisfied
 --> ui/define_class_invalid_type.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct CustomObject;
... |
  | | );
  | | ^
  | | |
  | |_the trait `Encode` is not implemented for `Box<u32>`
  |   required by a bound introduced by this call
  |
  = help: the following other types implement trait `Encode`:
            &'a T
            &'a mut T
            *const T
            *mut T
            AtomicI16
            AtomicI32
            AtomicI64
            AtomicI8
          and $N others
  = note: required for `Box<u32>` to implement `EncodeArgument`
  = note: required for `extern "C-unwind" fn(&CustomObject, objc2::runtime::Sel, Box<u32>)` to implement `MethodImplementation`
note: required by a bound in `ClassBuilderHelper::<T>::add_method`
 --> $WORKSPACE/crates/objc2/src/__macros/define_class/checks.rs
  |
  |     pub unsafe fn add_method<F>(&mut self, sel: Sel, func: F)
  |                   ---------- required by a bound in this associated function
  |     where
  |         F: MethodImplementation<Callee = T>,
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ClassBuilderHelper::<T>::add_method`
  = note: this error originates in the macro `$crate::__define_class_register_out` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CustomObject: EncodeArgument` is not satisfied
 --> ui/define_class_invalid_type.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct CustomObject;
... |
  | | );
  | |_^ unsatisfied trait bound
  |
help: the trait `Encode` is not implemented for `CustomObject`
 --> ui/define_class_invalid_type.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct CustomObject;
... |
  | | );
  | |_^
  = help: the following other types implement trait `Encode`:
            &'a T
            &'a mut T
            *const T
            *mut T
            AtomicI16
            AtomicI32
            AtomicI64
            AtomicI8
          and $N others
  = note: required for `CustomObject` to implement `EncodeArgument`
  = note: required for `CustomObject` to implement `ConvertArgument`
  = note: this error originates in the macro `$crate::__define_class_register_out` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CustomObject: Encode` is not satisfied
 --> ui/define_class_invalid_type.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct CustomObject;
... |
  | | );
  | | ^
  | | |
  | |_unsatisfied trait bound
  |   required by a bound introduced by this call
  |
help: the trait `Encode` is not implemented for `CustomObject`
 --> ui/define_class_invalid_type.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct CustomObject;
... |
  | | );
  | |_^
  = help: the following other types implement trait `Encode`:
            &'a T
            &'a mut T
            *const T
            *mut T
            AtomicI16
            AtomicI32
            AtomicI64
            AtomicI8
          and $N others
  = note: required for `CustomObject` to implement `EncodeArgument`
  = note: required for `extern "C-unwind" fn(&CustomObject, objc2::runtime::Sel, CustomObject)` to implement `MethodImplementation`
note: required by a bound in `ClassBuilderHelper::<T>::add_method`
 --> $WORKSPACE/crates/objc2/src/__macros/define_class/checks.rs
  |
  |     pub unsafe fn add_method<F>(&mut self, sel: Sel, func: F)
  |                   ---------- required by a bound in this associated function
  |     where
  |         F: MethodImplementation<Callee = T>,
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ClassBuilderHelper::<T>::add_method`
  = note: this error originates in the macro `$crate::__define_class_register_out` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Vec<()>: EncodeReturn` is not satisfied
 --> ui/define_class_invalid_type.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct CustomObject;
... |
  | | );
  | |_^ the trait `Encode` is not implemented for `Vec<()>`
  |
  = help: the following other types implement trait `Encode`:
            &'a T
            &'a mut T
            *const T
            *mut T
            AtomicI16
            AtomicI32
            AtomicI64
            AtomicI8
          and $N others
  = note: required for `Vec<()>` to implement `EncodeReturn`
  = note: required for `Vec<()>` to implement `ConvertReturn<()>`
  = note: this error originates in the macro `$crate::__define_class_method_out_inner` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Box<u32>: EncodeArgument` is not satisfied
 --> ui/define_class_invalid_type.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct CustomObject;
... |
  | | );
  | |_^ the trait `Encode` is not implemented for `Box<u32>`
  |
  = help: the following other types implement trait `Encode`:
            &'a T
            &'a mut T
            *const T
            *mut T
            AtomicI16
            AtomicI32
            AtomicI64
            AtomicI8
          and $N others
  = note: required for `Box<u32>` to implement `EncodeArgument`
  = note: required for `Box<u32>` to implement `ConvertArgument`
  = note: this error originates in the macro `$crate::__define_class_rewrite_params` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CustomObject: EncodeArgument` is not satisfied
 --> ui/define_class_invalid_type.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct CustomObject;
... |
  | | );
  | |_^ unsatisfied trait bound
  |
help: the trait `Encode` is not implemented for `CustomObject`
 --> ui/define_class_invalid_type.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct CustomObject;
... |
  | | );
  | |_^
  = help: the following other types implement trait `Encode`:
            &'a T
            &'a mut T
            *const T
            *mut T
            AtomicI16
            AtomicI32
            AtomicI64
            AtomicI8
          and $N others
  = note: required for `CustomObject` to implement `EncodeArgument`
  = note: required for `CustomObject` to implement `ConvertArgument`
  = note: this error originates in the macro `$crate::__define_class_rewrite_params` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)
