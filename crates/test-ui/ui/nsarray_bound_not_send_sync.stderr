error[E0277]: `*mut NSObject` cannot be shared between threads safely
 --> ui/nsarray_bound_not_send_sync.rs
  |
  |     needs_sync::<NSArray<NSObject>>();
  |                  ^^^^^^^^^^^^^^^^^ `*mut NSObject` cannot be shared between threads safely
  |
  = help: within `NSArray<NSObject>`, the trait `Sync` is not implemented for `*mut NSObject`
note: required because it appears within the type `PhantomData<*mut NSObject>`
 --> $RUST/core/src/marker.rs
  |
  | pub struct PhantomData<T: PointeeSized>;
  |            ^^^^^^^^^^^
note: required because it appears within the type `NSArray<NSObject>`
 --> $WORKSPACE/framework-crates/objc2-foundation/src/generated/NSArray.rs
  |
  |     pub struct NSArray<ObjectType: ?Sized = AnyObject>;
  |                ^^^^^^^
note: required by a bound in `needs_sync`
 --> ui/nsarray_bound_not_send_sync.rs
  |
  | fn needs_sync<T: ?Sized + Sync>() {}
  |                           ^^^^ required by this bound in `needs_sync`

error[E0277]: `UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>` cannot be shared between threads safely
 --> ui/nsarray_bound_not_send_sync.rs
  |
  |     needs_sync::<NSArray<NSObject>>();
  |                  ^^^^^^^^^^^^^^^^^ `UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>` cannot be shared between threads safely
  |
  = help: within `NSArray<NSObject>`, the trait `Sync` is not implemented for `UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>`
note: required because it appears within the type `objc2::runtime::anyobject::AnyObject`
 --> $WORKSPACE/crates/objc2/src/runtime/anyobject.rs
  |
  | pub struct AnyObject {
  |            ^^^^^^^^^
note: required because it appears within the type `NSObject`
 --> $WORKSPACE/crates/objc2/src/runtime/nsobject.rs
  |
  | pub struct NSObject {
  |            ^^^^^^^^
note: required because it appears within the type `NSArray<NSObject>`
 --> $WORKSPACE/framework-crates/objc2-foundation/src/generated/NSArray.rs
  |
  |     pub struct NSArray<ObjectType: ?Sized = AnyObject>;
  |                ^^^^^^^
note: required by a bound in `needs_sync`
 --> ui/nsarray_bound_not_send_sync.rs
  |
  | fn needs_sync<T: ?Sized + Sync>() {}
  |                           ^^^^ required by this bound in `needs_sync`

error[E0277]: `*mut NSObject` cannot be sent between threads safely
 --> ui/nsarray_bound_not_send_sync.rs
  |
  |     needs_send::<NSArray<NSObject>>();
  |                  ^^^^^^^^^^^^^^^^^ `*mut NSObject` cannot be sent between threads safely
  |
  = help: within `NSArray<NSObject>`, the trait `Send` is not implemented for `*mut NSObject`
note: required because it appears within the type `PhantomData<*mut NSObject>`
 --> $RUST/core/src/marker.rs
  |
  | pub struct PhantomData<T: PointeeSized>;
  |            ^^^^^^^^^^^
note: required because it appears within the type `NSArray<NSObject>`
 --> $WORKSPACE/framework-crates/objc2-foundation/src/generated/NSArray.rs
  |
  |     pub struct NSArray<ObjectType: ?Sized = AnyObject>;
  |                ^^^^^^^
note: required by a bound in `needs_send`
 --> ui/nsarray_bound_not_send_sync.rs
  |
  | fn needs_send<T: ?Sized + Send>() {}
  |                           ^^^^ required by this bound in `needs_send`

error[E0277]: `*const UnsafeCell<()>` cannot be sent between threads safely
 --> ui/nsarray_bound_not_send_sync.rs
  |
  |     needs_send::<NSArray<NSObject>>();
  |                  ^^^^^^^^^^^^^^^^^ `*const UnsafeCell<()>` cannot be sent between threads safely
  |
  = help: within `NSArray<NSObject>`, the trait `Send` is not implemented for `*const UnsafeCell<()>`
  = note: required because it appears within the type `(*const UnsafeCell<()>, PhantomPinned)`
note: required because it appears within the type `PhantomData<(*const UnsafeCell<()>, PhantomPinned)>`
 --> $RUST/core/src/marker.rs
  |
  | pub struct PhantomData<T: PointeeSized>;
  |            ^^^^^^^^^^^
note: required because it appears within the type `UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>`
 --> $RUST/core/src/cell.rs
  |
  | pub struct UnsafeCell<T: ?Sized> {
  |            ^^^^^^^^^^
note: required because it appears within the type `objc2::runtime::anyobject::AnyObject`
 --> $WORKSPACE/crates/objc2/src/runtime/anyobject.rs
  |
  | pub struct AnyObject {
  |            ^^^^^^^^^
note: required because it appears within the type `NSObject`
 --> $WORKSPACE/crates/objc2/src/runtime/nsobject.rs
  |
  | pub struct NSObject {
  |            ^^^^^^^^
note: required because it appears within the type `NSArray<NSObject>`
 --> $WORKSPACE/framework-crates/objc2-foundation/src/generated/NSArray.rs
  |
  |     pub struct NSArray<ObjectType: ?Sized = AnyObject>;
  |                ^^^^^^^
note: required by a bound in `needs_send`
 --> ui/nsarray_bound_not_send_sync.rs
  |
  | fn needs_send<T: ?Sized + Send>() {}
  |                           ^^^^ required by this bound in `needs_send`

error[E0277]: `*mut NSObject` cannot be shared between threads safely
 --> ui/nsarray_bound_not_send_sync.rs
  |
  |     needs_sync::<NSMutableArray<NSObject>>();
  |                  ^^^^^^^^^^^^^^^^^^^^^^^^ `*mut NSObject` cannot be shared between threads safely
  |
  = help: within `NSMutableArray<NSObject>`, the trait `Sync` is not implemented for `*mut NSObject`
note: required because it appears within the type `PhantomData<*mut NSObject>`
 --> $RUST/core/src/marker.rs
  |
  | pub struct PhantomData<T: PointeeSized>;
  |            ^^^^^^^^^^^
note: required because it appears within the type `NSMutableArray<NSObject>`
 --> $WORKSPACE/framework-crates/objc2-foundation/src/generated/NSArray.rs
  |
  |     pub struct NSMutableArray<ObjectType: ?Sized = AnyObject>;
  |                ^^^^^^^^^^^^^^
note: required by a bound in `needs_sync`
 --> ui/nsarray_bound_not_send_sync.rs
  |
  | fn needs_sync<T: ?Sized + Sync>() {}
  |                           ^^^^ required by this bound in `needs_sync`

error[E0277]: `UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>` cannot be shared between threads safely
 --> ui/nsarray_bound_not_send_sync.rs
  |
  |     needs_sync::<NSMutableArray<NSObject>>();
  |                  ^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>` cannot be shared between threads safely
  |
  = help: within `NSMutableArray<NSObject>`, the trait `Sync` is not implemented for `UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>`
note: required because it appears within the type `objc2::runtime::anyobject::AnyObject`
 --> $WORKSPACE/crates/objc2/src/runtime/anyobject.rs
  |
  | pub struct AnyObject {
  |            ^^^^^^^^^
note: required because it appears within the type `NSObject`
 --> $WORKSPACE/crates/objc2/src/runtime/nsobject.rs
  |
  | pub struct NSObject {
  |            ^^^^^^^^
note: required because it appears within the type `NSArray<NSObject>`
 --> $WORKSPACE/framework-crates/objc2-foundation/src/generated/NSArray.rs
  |
  |     pub struct NSArray<ObjectType: ?Sized = AnyObject>;
  |                ^^^^^^^
note: required because it appears within the type `NSMutableArray<NSObject>`
 --> $WORKSPACE/framework-crates/objc2-foundation/src/generated/NSArray.rs
  |
  |     pub struct NSMutableArray<ObjectType: ?Sized = AnyObject>;
  |                ^^^^^^^^^^^^^^
note: required by a bound in `needs_sync`
 --> ui/nsarray_bound_not_send_sync.rs
  |
  | fn needs_sync<T: ?Sized + Sync>() {}
  |                           ^^^^ required by this bound in `needs_sync`

error[E0277]: `*mut NSObject` cannot be sent between threads safely
 --> ui/nsarray_bound_not_send_sync.rs
  |
  |     needs_send::<NSMutableArray<NSObject>>();
  |                  ^^^^^^^^^^^^^^^^^^^^^^^^ `*mut NSObject` cannot be sent between threads safely
  |
  = help: within `NSMutableArray<NSObject>`, the trait `Send` is not implemented for `*mut NSObject`
note: required because it appears within the type `PhantomData<*mut NSObject>`
 --> $RUST/core/src/marker.rs
  |
  | pub struct PhantomData<T: PointeeSized>;
  |            ^^^^^^^^^^^
note: required because it appears within the type `NSMutableArray<NSObject>`
 --> $WORKSPACE/framework-crates/objc2-foundation/src/generated/NSArray.rs
  |
  |     pub struct NSMutableArray<ObjectType: ?Sized = AnyObject>;
  |                ^^^^^^^^^^^^^^
note: required by a bound in `needs_send`
 --> ui/nsarray_bound_not_send_sync.rs
  |
  | fn needs_send<T: ?Sized + Send>() {}
  |                           ^^^^ required by this bound in `needs_send`

error[E0277]: `*const UnsafeCell<()>` cannot be sent between threads safely
 --> ui/nsarray_bound_not_send_sync.rs
  |
  |     needs_send::<NSMutableArray<NSObject>>();
  |                  ^^^^^^^^^^^^^^^^^^^^^^^^ `*const UnsafeCell<()>` cannot be sent between threads safely
  |
  = help: within `NSMutableArray<NSObject>`, the trait `Send` is not implemented for `*const UnsafeCell<()>`
  = note: required because it appears within the type `(*const UnsafeCell<()>, PhantomPinned)`
note: required because it appears within the type `PhantomData<(*const UnsafeCell<()>, PhantomPinned)>`
 --> $RUST/core/src/marker.rs
  |
  | pub struct PhantomData<T: PointeeSized>;
  |            ^^^^^^^^^^^
note: required because it appears within the type `UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>`
 --> $RUST/core/src/cell.rs
  |
  | pub struct UnsafeCell<T: ?Sized> {
  |            ^^^^^^^^^^
note: required because it appears within the type `objc2::runtime::anyobject::AnyObject`
 --> $WORKSPACE/crates/objc2/src/runtime/anyobject.rs
  |
  | pub struct AnyObject {
  |            ^^^^^^^^^
note: required because it appears within the type `NSObject`
 --> $WORKSPACE/crates/objc2/src/runtime/nsobject.rs
  |
  | pub struct NSObject {
  |            ^^^^^^^^
note: required because it appears within the type `NSArray<NSObject>`
 --> $WORKSPACE/framework-crates/objc2-foundation/src/generated/NSArray.rs
  |
  |     pub struct NSArray<ObjectType: ?Sized = AnyObject>;
  |                ^^^^^^^
note: required because it appears within the type `NSMutableArray<NSObject>`
 --> $WORKSPACE/framework-crates/objc2-foundation/src/generated/NSArray.rs
  |
  |     pub struct NSMutableArray<ObjectType: ?Sized = AnyObject>;
  |                ^^^^^^^^^^^^^^
note: required by a bound in `needs_send`
 --> ui/nsarray_bound_not_send_sync.rs
  |
  | fn needs_send<T: ?Sized + Send>() {}
  |                           ^^^^ required by this bound in `needs_send`
