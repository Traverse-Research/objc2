error[E0308]: mismatched types
  --> ui/msg_send_invalid_error.rs
   |
   |     let _: () = unsafe { msg_send![obj, a: _] };
   |                          ^^^^^^^^^^^^^^^^^^^^ expected `()`, found `Result<_, Retained<_>>`
   |
   = note: expected unit type `()`
                   found enum `Result<_, Retained<_>>`
   = note: this error originates in the macro `$crate::__msg_send_helper` which comes from the expansion of the macro `msg_send` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider using `Result::expect` to unwrap the `Result<_, Retained<_>>` value, panicking if the value is a `Result::Err`
   |
11 |     let _: () = unsafe { msg_send![obj, a: _].expect("REASON") };
   |                                              +++++++++++++++++

error[E0277]: the trait bound `MethodFamily<6>: MsgSendError<&NSString, i32>` is not satisfied
 --> ui/msg_send_invalid_error.rs
  |
  |     let _: Result<i32, _> = unsafe { msg_send![obj, b: _] };
  |                                      ^^^^^^^^^^^^^^^^^^^^ the trait `MsgSendError<&NSString, i32>` is not implemented for `MethodFamily<6>`
  |
  = note: this error originates in the macro `$crate::__msg_send_helper` which comes from the expansion of the macro `msg_send` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> ui/msg_send_invalid_error.rs
   |
   |     let _: Result<(), i32> = unsafe { msg_send![obj, c: _] };
   |                                       ^^^^^^^^^^^^^^^^^^^^ expected `Result<(), i32>`, found `Result<_, Retained<_>>`
   |
   = note: expected enum `Result<(), i32>`
              found enum `Result<_, Retained<_>>`
   = note: this error originates in the macro `$crate::__msg_send_helper` which comes from the expansion of the macro `msg_send` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider using `Result::expect` to unwrap the `Result<_, Retained<_>>` value, panicking if the value is a `Result::Err`
   |
13 |     let _: Result<(), i32> = unsafe { msg_send![obj, c: _].expect("REASON") };
   |                                                           +++++++++++++++++

error[E0277]: the trait bound `i32: ClassType` is not satisfied
 --> ui/msg_send_invalid_error.rs
  |
  |     let _: Result<(), Retained<i32>> = unsafe { msg_send![obj, d: _] };
  |                                                 ^^^^^^^^^^^^^^^^^^^^ the trait `ClassType` is not implemented for `i32`
  |
  = help: the following other types implement trait `ClassType`:
            NSArray<ObjectType>
            NSConstantString
            NSCountedSet<ObjectType>
            NSDictionary<KeyType, ObjectType>
            NSEnumerator<ObjectType>
            NSError
            NSMutableArray<ObjectType>
            NSMutableDictionary<KeyType, ObjectType>
          and $N others
note: required by a bound in `send_message_error`
 --> $WORKSPACE/crates/objc2/src/__macros/msg_send/retained.rs
  |
  |     unsafe fn send_message_error<A, E>(
  |               ------------------ required by a bound in this associated function
...
  |         E: ClassType;
  |            ^^^^^^^^^ required by this bound in `MsgSendError::send_message_error`
  = note: this error originates in the macro `$crate::__msg_send_helper` which comes from the expansion of the macro `msg_send` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> ui/msg_send_invalid_error.rs
   |
   |     let _: () = unsafe { msg_send![obj, e: obj, f: _] };
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `Result<_, Retained<_>>`
   |
   = note: expected unit type `()`
                   found enum `Result<_, Retained<_>>`
   = note: this error originates in the macro `$crate::__msg_send_helper` which comes from the expansion of the macro `msg_send` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider using `Result::expect` to unwrap the `Result<_, Retained<_>>` value, panicking if the value is a `Result::Err`
   |
17 |     let _: () = unsafe { msg_send![obj, e: obj, f: _].expect("REASON") };
   |                                                      +++++++++++++++++

error[E0308]: mismatched types
  --> ui/msg_send_invalid_error.rs
   |
   |     let _: () = unsafe { msg_send![super(obj), g: _] };
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `Result<_, Retained<_>>`
   |
   = note: expected unit type `()`
                   found enum `Result<_, Retained<_>>`
   = note: this error originates in the macro `$crate::__msg_send_helper` which comes from the expansion of the macro `msg_send` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider using `Result::expect` to unwrap the `Result<_, Retained<_>>` value, panicking if the value is a `Result::Err`
   |
18 |     let _: () = unsafe { msg_send![super(obj), g: _].expect("REASON") };
   |                                                     +++++++++++++++++

error[E0308]: mismatched types
  --> ui/msg_send_invalid_error.rs
   |
   |     let _: () = unsafe { msg_send![super(obj, NSString::class()), h: _] };
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `Result<_, Retained<_>>`
   |
   = note: expected unit type `()`
                   found enum `Result<_, Retained<_>>`
   = note: this error originates in the macro `$crate::__msg_send_helper` which comes from the expansion of the macro `msg_send` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider using `Result::expect` to unwrap the `Result<_, Retained<_>>` value, panicking if the value is a `Result::Err`
   |
19 |     let _: () = unsafe { msg_send![super(obj, NSString::class()), h: _].expect("REASON") };
   |                                                                        +++++++++++++++++

error[E0308]: mismatched types
 --> ui/msg_send_invalid_error.rs
  |
  |         unsafe { msg_send![NSObject::alloc(), initWithError: _] };
  |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<Retained<AnyObject>, ...>`, found `Result<Retained<NSObject>, Retained<_>>`
  |
  = note: expected enum `Result<Retained<AnyObject>, Retained<NSObject>>`
             found enum `Result<Retained<NSObject>, Retained<_>>`
  = note: this error originates in the macro `$crate::__msg_send_helper` which comes from the expansion of the macro `msg_send` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
 --> ui/msg_send_invalid_error.rs
  |
  |         unsafe { msg_send![NSObject::class(), allocWithError: _] };
  |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<Allocated<NSObject>, ...>`, found `Result<(), Retained<_>>`
  |
  = note: expected enum `Result<Allocated<NSObject>, Retained<NSObject>>`
             found enum `Result<(), Retained<_>>`
  = note: this error originates in the macro `$crate::__msg_send_helper` which comes from the expansion of the macro `msg_send` (in Nightly builds, run with -Z macro-backtrace for more info)
